// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */

import { initFormatters } from './formatters'
import type { Locales, Namespaces, Translations } from './i18n-types'
import { loadedFormatters, loadedLocales, locales } from './i18n-util'

const localeTranslationLoaders = {
	en: () => import('./en'),
	'pt-BR': () => import('./pt-BR'),
}

const localeNamespaceLoaders = {
	en: {
		'about-us': () => import('./en/about-us'),
		'agenda-announcement': () => import('./en/agenda-announcement'),
		breadcrumbs: () => import('./en/breadcrumbs'),
		faq: () => import('./en/faq'),
		fields: () => import('./en/fields'),
		footer: () => import('./en/footer'),
		'how-to-participate': () => import('./en/how-to-participate'),
		'how-to-participate-component': () => import('./en/how-to-participate-component'),
		landing: () => import('./en/landing'),
		navbar: () => import('./en/navbar'),
		'search-field': () => import('./en/search-field'),
		testimonial: () => import('./en/testimonial'),
		utils: () => import('./en/utils')
	},
	'pt-BR': {
		'about-us': () => import('./pt-BR/about-us'),
		'agenda-announcement': () => import('./pt-BR/agenda-announcement'),
		breadcrumbs: () => import('./pt-BR/breadcrumbs'),
		faq: () => import('./pt-BR/faq'),
		fields: () => import('./pt-BR/fields'),
		footer: () => import('./pt-BR/footer'),
		'how-to-participate': () => import('./pt-BR/how-to-participate'),
		'how-to-participate-component': () => import('./pt-BR/how-to-participate-component'),
		landing: () => import('./pt-BR/landing'),
		navbar: () => import('./pt-BR/navbar'),
		'search-field': () => import('./pt-BR/search-field'),
		testimonial: () => import('./pt-BR/testimonial'),
		utils: () => import('./pt-BR/utils')
	}
}

const updateDictionary = (locale: Locales, dictionary: Partial<Translations>): Translations =>
	loadedLocales[locale] = { ...loadedLocales[locale], ...dictionary }

export const importLocaleAsync = async (locale: Locales): Promise<Translations> =>
	(await localeTranslationLoaders[locale]()).default as unknown as Translations

export const loadLocaleAsync = async (locale: Locales): Promise<void> => {
	updateDictionary(locale, await importLocaleAsync(locale))
	loadFormatters(locale)
}

export const loadAllLocalesAsync = (): Promise<void[]> => Promise.all(locales.map(loadLocaleAsync))

export const loadFormatters = (locale: Locales): void =>
	void (loadedFormatters[locale] = initFormatters(locale))

export const importNamespaceAsync = async<Namespace extends Namespaces>(locale: Locales, namespace: Namespace) =>
	(await localeNamespaceLoaders[locale][namespace]()).default as unknown as Translations[Namespace]

export const loadNamespaceAsync = async <Namespace extends Namespaces>(locale: Locales, namespace: Namespace): Promise<void> =>
	void updateDictionary(locale, { [namespace]: await importNamespaceAsync(locale, namespace )})
